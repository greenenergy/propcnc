
		    My propeller CNC Controller Software

The idea is to use one cog per motor, so for a reprap that is 4 cogs (x,y,z,
extruder).

One cog can be the G-Code interpreter

One cog can drive a display (multi-line lcd or vga)

--------------------

The X/Y coordinates seem to be in millimeters, and the build area is 20 cm x 20
cm, which is 200mm by 200mm. 

I can use an 8.8 Fixed Point system for tracking all the coordinates. This
allows 256 fractional steps, which is twice as good as two digits of precision.

One motor can run at full speed, and the other will run slower. The interpreter
can determine how slow the slow motor needs to go to make a straight line.

One problem I'd like to deal with is that we are dealing with physical devices,
so taking acceleration/deceleration into account could be important. Apparently
it helps in accuracy.

Also - one fellow was talking about what happens at corners. When the printer
heads to a corner, then wants to change direction, there is some deceleration
and then acceleration, so the amount of material involved will change unless the
extruder is slowed down to take this into account. And you must take into
account the spring constant of the plastic, so that when you tell the extruder
to slow down, you tell it soon enough so that the plastic doesn't just run on by
itself. All of these changes are pretty small, but necessary for a high quality
build.


------------------
* Need to be able to read the microSD card for file storage
* also need to be able to accept line by line instructions from a host over usb


--------------
Pin Usage:

P0-P5: LCD Display

The motors will use 3 pins, x = data pin, x+1 = shift pin, x+2 = output pin
DS: data pin
SHCP: shift pin
STCP: output pin


P6-P8: Motor 1  
P9-P11: Motor 2
P12-P14: Motor 3
P15-P17: Motor 4

P28: SCL - I2C Serial clock pin
P29: SDA - I2C Serial data pin
P30: TX - USB
P31: RX - USB

----------------------
Circumference of a circle: pi*diameter.

Assuming that the spindle has a diameter of 1cm, the circumference would be
3.1415927 cm or 31.41 mm.

One degree rotation represents .008726646 cm, or .0872 mm.

One full step = 1.8*.0872 or .157 mm

1/16 step = (1.8/16)*.0872 or .00981 mm

So a distance of 10 cm = 100mm = 100/.157 or 636.94 steps

------------------------
So - the next big question is, where are the calculations done? How much work is
done by the individual motor drivers, and how much by the master controller?

I want the motors to be as perfectly in sync as possible. To this end, they must
be predictable and deterministic. To calculate the various parameters will
involve doing divides and multiplies. These are looping instructions and
therefore can take a variable amount of time. If each motor is going to have to
figure out for itself what it's doing, then the time it takes to actually get
going will be non-deterministic, and not in sync with the other motor.

So it seems that the master controller has to calculate the breakdown for each
motor and then give the motor fine grained information.

I also would like to implement acceleration & deceleration, but the motors must
be coordinated or you will get crooked lines. The only way to coordinate them
would be to have the master controller do the coordinating.

---------------
Another thing to think about is how to use microstepping. As I see it, the best
place for microstepping is either during curves, or for whichever axis is going
slow. If we have a move where one axis is moving a long way and another is
moving a short way - a very acute angle in other words, then the short axis
could use microstepping so that the individual steps don't stand out so much.
When doing line draws, it's the long, shallow lines that show the worst
aliasing, since the step really stands out from the long straight parts.

So we have 1/2, 1/4, 1/8 and 1/16 steps. When do we use a particular step type?
The higher the ratio between one motor to the other, the more micro the
stepping. If we're doing a 45 degree slope, both motors can turn as fast as
possible - minimum interstep delay. 

The worst case would be one axis going 200.00 mm and the other going 0.01 mm.
That one hundredth of a millimeter has to be spread somehow over the iterations
that the other motor will take over 200 millimeters of travel.

If we go with full stepping for the fast motor, the number of steps will be
(assuming 200mm of travel):

pi = 3.14
circum = pi * diameter
onedegree_dist = circum / 360

numsteps = 200.00 / onedegree_dist



Given a diameter of 1cm, this yields 22,929.94 steps for a full run. That number
will not fit in 16 bits. So I could use a 20.12 format, so we could store
numbers up to 1 million with 4096 subdivisions of accuracy (so somewhere between
3 and 4 decimal places).


